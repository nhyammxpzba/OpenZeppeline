// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract LoanContract {
    address public owner;
    mapping(address => uint256) public balances;
    mapping(address => uint256) public loanDueDates;
    mapping(address => uint256) public interestRates;

    event LoanIssued(address borrower, uint256 amount, uint256 dueDate);
    event LoanRepaid(address borrower, uint256 amount);
    event InterestRateSet(address borrower, uint256 interestRate);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function setInterestRate(uint256 rate) external onlyOwner {
        interestRates[msg.sender] = rate;
        emit InterestRateSet(msg.sender, rate);
    }

    function deposit() external payable {
        // Allow borrowers to deposit additional collateral
        // (This functionality can be used for risk management purposes)
        // No additional logic is added for simplicity in this example.
    }

    function borrow(uint256 amount, uint256 durationDays) external {
        require(amount > 0, "Borrow amount must be greater than 0");
        require(balances[msg.sender] == 0, "You have an existing loan");

        // Assume a stablecoin is used for the loan (e.g., USDC)
        IERC20 usdcToken = IERC20(address(0xUsdcTokenAddress));
        uint256 totalAmount = amount;

        // Transfer total amount to borrower
        require(usdcToken.transferFrom(owner, msg.sender, totalAmount), "Transfer failed");

        // Update balances and loan due date
        balances[msg.sender] += totalAmount;
        loanDueDates[msg.sender] = block.timestamp + (durationDays * 1 days);

        emit LoanIssued(msg.sender, totalAmount, loanDueDates[msg.sender]);
    }

    function repay(uint256 repayAmount) external {
        require(balances[msg.sender] > 0, "No existing loan");
        require(block.timestamp <= loanDueDates[msg.sender], "Loan is overdue");

        // Assume a stablecoin is used for the loan (e.g., USDC)
        IERC20 usdcToken = IERC20(address(0xUsdcTokenAddress));

        // Transfer repaid amount to owner
        require(usdcToken.transferFrom(msg.sender, owner, repayAmount), "Transfer failed");

        // Update balances
        balances[msg.sender] -= repayAmount;

        emit LoanRepaid(msg.sender, repayAmount);
    }

    function calculateInterest(uint256 amount, uint256 durationDays) internal view returns (uint256) {
        // Simple interest calculation based on the interest rate set by the owner
        uint256 annualInterestRate = interestRates[msg.sender];
        return (amount * annualInterestRate * durationDays) / (365 * 100);
    }

    function getLoanDetails() external view returns (uint256, uint256) {
        return (balances[msg.sender], loanDueDates[msg.sender]);
    }
}
